### vi-mode / zeesh! plugin

fpath=( $plugin_dir/func $fpath )
autoload -U $plugin_dir/func/*(:t)

## exports
export EDITOR=vim
export GIT_EDITOR=$EDITOR

hash vimpager 2>/dev/null && export PAGER=vimpager
export GIT_PAGER=$PAGER

# You can use KEYTIMEOUT to lower the time it takes us to get into escape mode
# but it will break a lot of widgets.
export KEYTIMEOUT=10

## aliases
alias less=$PAGER
alias v=vim
alias vm=vim
alias vmi=vim

if [ `uname` = 'Darwin' ]; then
    alias m=mvim-wrapper
else
    alias g=gvim-wrapper
fi

# Updates editor information when the keymap changes.
zle-keymap-select() {
    zle reset-prompt
    zle -R
}

# Widget to enter normal mode without moving cursor back
zle-esc-in-place() {
    zle -K vicmd

    # This prevents accidental character deletion when entering normal mode at
    # end of line and b is pressed.
    zle vi-backward-char
    zle vi-forward-char
}

zle-ctrl-ax() {
    integer pos NUMBER i first last prelength diff
    pos=$CURSOR
    # find numbers starting from the left of the cursor to the end of the line
    while [[ $BUFFER[$pos] != [[:digit:]] ]]; do
        (( pos++ ))
        (( $pos > $#BUFFER )) && return
    done

    # use the numeric argument and default to 1
    # negate if called as ctrl-a
    NUMBER=${NUMERIC:-1}
    if [[ $WIDGET = zle-ctrl-a ]]; then
        (( NUMBER = 0 - $NUMBER ))
    fi

    # find the start of the number
    i=$pos
    while [[ $BUFFER[$i-1] = [[:digit:]] ]]; do
        (( i-- ))
    done
    first=$i

    # include one leading - if found
    if [[ $BUFFER[$first-1] = - ]]; then
        (( first-- ))
    fi

    # find the end of the number
    i=$pos
    while [[ $BUFFER[$i+1] = [[:digit:]] ]]; do
        (( i++ ))
    done
    last=$i

    # change the number and move cursor after it
    prelength=$#BUFFER
    (( BUFFER[$first,$last] += $NUMBER ))
    (( diff = $#BUFFER - $prelength ))
    (( CURSOR = last + diff ))
}

autoload -Uz edit-command-line

zle -N edit-command-line
zle -N zle-ctrl-a zle-ctrl-ax
zle -N zle-ctrl-x zle-ctrl-ax
zle -N zle-esc-in-place
zle -N zle-keymap-select

bindkey -M viins '^[' zle-esc-in-place
bindkey -M vicmd '^[' zle-esc-in-place

bindkey -M vicmd '^m' accept-line

bindkey -M vicmd 'gg' vi-beginning-of-line
bindkey -M vicmd 'G' vi-end-of-line

bindkey -M vicmd '^a' zle-ctrl-a
bindkey -M vicmd '^x' zle-ctrl-x

bindkey -M vicmd 'dd' kill-whole-line
bindkey -M vicmd 'd$' vi-kill-eol

bindkey -M vicmd 'yy' vi-yank-whole-line
bindkey -M vicmd 'Y' vi-yank-eol

bindkey -M viins '^k' history-search-backward
bindkey -M vicmd '^k' history-search-backward
bindkey -M viins '^j' history-search-forward
bindkey -M vicmd '^j' history-search-forward
bindkey -M viins '^n' history-search-backward
bindkey -M vicmd '^n' history-search-backward
bindkey -M viins '^p' history-search-forward
bindkey -M vicmd '^p' history-search-forward

bindkey -M viins '^U' vi-change-whole-line
bindkey -M vicmd '^U' vi-change-whole-line

bindkey -M viins '' backward-delete-char
bindkey -M vicmd '' backward-delete-char
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

bindkey -M viins "^[[0C" forward-char
bindkey -M viins "^[[0D" backward-char
bindkey -M viins "^[[C"  forward-char
bindkey -M viins "^[[D"  backward-char
bindkey -M viins "OC"  forward-char
bindkey -M viins "OD"  backward-char

bindkey -M vicmd "^[[0C" forward-char
bindkey -M vicmd "^[[0D" backward-char
bindkey -M vicmd "^[[C"  forward-char
bindkey -M vicmd "^[[D"  backward-char
bindkey -M vicmd "OC"  forward-char
bindkey -M vicmd "OD"  backward-char

bindkey -M viins ""  vi-beginning-of-line
bindkey -M viins ""  vi-end-of-line
bindkey -M viins "^A"  vi-beginning-of-line
bindkey -M viins "^E"  vi-end-of-line

bindkey -M vicmd "^[[H"  vi-beginning-of-line
bindkey -M vicmd "^[[F"  vi-end-of-line
bindkey -M vicmd "OH"  vi-beginning-of-line
bindkey -M vicmd "OF"  vi-end-of-line

bindkey -M viins "^[[H"  vi-beginning-of-line
bindkey -M viins "^[[F"  vi-end-of-line
bindkey -M viins "OH"  vi-beginning-of-line
bindkey -M viins "OF"  vi-end-of-line

# switch vi mode mappings
bindkey -v

# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
    zle && { zle reset-prompt; zle -R }
}

# vim: ft=zsh
